clc; clear;

% Инициализация переменных для явного метода Эйлера
x(1) = 0;
y1(1) = 1;
y2(1) = 1;
h = 0.1;
i = 1;

disp('Числа жёсткости') 
while(x(i) < 1) 
    g = [exp(-x(i).^2), x(i); -1, 2];
    s = max(real(eig(g))) / min(real(eig(g)));
    fprintf('%d %d\n', i, s);
    i = i + 1;
    y1(i) = y1(i-1) + (y1(i-1) * exp(-x(i-1).^2) + x(i-1) * y2(i-1)) * h;
    y2(i) = y2(i-1) + (3 * x(i-1) - y1(i-1) + 2 * y2(i-1)) * h;
    x(i) = x(i-1) + h; 
end
fprintf('\n\n'); 

% Вывод найденных значений функции явного метода Эйлера
fprintf('Значения функции y1 = f1(x) по явному методу Эйлера:\n\n');
for i = 1:length(x)
    disp([num2str(x(i)), '   ', num2str(y1(i))]);
    fprintf('\n');
end
fprintf('\n');
fprintf('Значения функции y2 = f2(x) по явному методу Эйлера:\n\n');
for i = 1:length(x)
    disp([num2str(x(i)), '   ', num2str(y2(i))]);
    fprintf('\n');
end
disp('___________________________________________________________________') 

% Инициализация переменных для метода Эйлера-Коши
x(1) = 0;
y_1(1) = 1;
y_2(1) = 1;
y1(1) = y_1(1);
y2(1) = y_2(1);
h = 0.1;
h2 = h / 2;
i = 1;
while(x(i) < 1)  
    i = i + 1;
    y_1(i) = y_1(i-1) + (y_1(i-1) * exp(-x(i-1).^2) + x(i-1) * y_2(i-1)) * h;
    y_2(i) = y_2(i-1) + (3 * x(i-1) - y_1(i-1) + 2 * y_2(i-1)) * h;
    
    y1(i) = y1(i-1) + (y1(i-1) * exp(-x(i-1).^2) + x(i-1) * y2(i-1) + y1(i-1) * exp(-x(i-1).^2) + x(i-1) * y2(i-1)) * h2;
    y2(i) = y2(i-1) + (3 * x(i-1) - y1(i-1) + 2 * y2(i-1) + 3 * x(i-1) - y_1(i-1) + 2 * y_2(i-1)) * h2;
    x(i) = x(i-1) + h; 
end

% Вывод найденных значений функции метода Эйлера-Коши
fprintf('Значения функции y1 = f1(x) по методу Эйлера-Коши:\n\n');
for i = 1:length(x)
    disp([num2str(x(i)), '   ', num2str(y_1(i))]);
    fprintf('\n');
end
fprintf('Значения функции y2 = f2(x) по методу Эйлера-Коши:\n\n');
for i = 1:length(x)
    disp([num2str(x(i)), '   ', num2str(y_2(i))]);
    fprintf('\n');
end
disp('___________________________________________________________________')

% Инициализация переменных для метода Рунге-Кутта
x(1) = 0;
y1(1) = 1;
y2(1) = 1;
h = 0.1;
h2 = h / 2;
i = 1;
while(x(i) < 1)  
    i = i + 1;
    k1 = (y1(i-1) * exp(-x(i-1).^2) + x(i-1) * y2(i-1)) * h;
    l1 = (3 * x(i-1) - y1(i-1) + 2 * y2(i-1)) * h;
    
    k2 = ((y1(i-1) + k1 / 2) * exp(-(x(i-1) + h2).^2) + (x(i-1) + h2) * (y2(i-1) + l1 / 2)) * h;
    l2 = (3 * (x(i-1) + h2) - (y1(i-1) + k1 / 2) + 2 * (y2(i-1) + l1 / 2)) * h;
    
    k3 = ((y1(i-1) + k2 / 2) * exp(-(x(i-1) + h2).^2) + (x(i-1) + h2) * (y2(i-1) + l2 / 2)) * h;
    l3 = (3 * (x(i-1) + h2) - (y1(i-1) + k2 / 2) + 2 * (y2(i-1) + l2 / 2)) * h;
    
    k4 = ((y1(i-1) + k3) * exp(-(x(i-1) + h).^2) + (x(i-1) + h) * (y2(i-1) + l3)) * h;
    l4 = (3 * (x(i-1) + h) - (y1(i-1) + k3) + 2 * (y2(i-1) + l3)) * h;
    
    delta1 = (k1 + 2 * k2 + 2 * k3 + k4) / 6;
    delta2 = (l1 + 2 * l2 + 2 * l3 + l4) / 6;
    
    y1(i) = y1(i-1) + delta1;
    y2(i) = y2(i-1) + delta2;
    x(i) = x(i-1) + h; 
end
 
% Вывод найденных значений функции метода Рунге-Кутта
fprintf('Значения функции y1 = f1(x) по методу Рунге-Кутты:\n\n');
for i = 1:length(x)
    disp([num2str(x(i)), '   ', num2str(y1(i))]);
    fprintf('\n');
end
fprintf('Значения функции y2 = f2(x) по методу Рунге-Кутты:\n\n');
for i = 1:length(x)
    disp([num2str(x(i)), '   ', num2str(y2(i))]);
    fprintf('\n');
end
disp('___________________________________________________________________')

% Стандартные методы ODE45
% Определение начальных условий
y0 = [1; 1];

% Решение системы дифференциальных уравнений
[x_ode, y_ode] = ode45(@myODEs, [0, 1], y0);

% Построение всех графиков на одной фигуре
figure;

% Графики явного метода Эйлера
plot(x, y1, 'r', 'DisplayName', 'явный Эйлер y1');
hold on;
plot(x, y2, 'r', 'DisplayName', 'явный Эйлер y2');

% Графики метода Эйлера-Коши
plot(x, y_1, 'g--', 'DisplayName', 'мод. Эйлер y1');
plot(x, y_2, 'g--', 'DisplayName', 'мод. Эйлер y2');

% Графики метода Рунге-Кутта
plot(x, y1, 'b--', 'DisplayName', 'Рунге-Кутт y1');
plot(x, y2, 'b--', 'DisplayName', 'Рунге-Кутт y2');

% Графики метода ode45
plot(x_ode, y_ode(:,1), 'm', 'DisplayName', 'MATLAB y1');
plot(x_ode, y_ode(:,2), 'c', 'DisplayName', 'MATLAB y2');

grid on;
xlabel 'x';
ylabel 'y';
legend;
title('Решение системы дифференциальных уравнений');
hold off;

% Определение функции myODEs
function dydx = myODEs(x, y)
    dydx = [y(1) * exp(-x.^2) + x * y(2); 3 * x - y(1) + 2 * y(2)];
end